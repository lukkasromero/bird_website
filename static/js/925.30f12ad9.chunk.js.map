{"version":3,"file":"static/js/925.30f12ad9.chunk.js","mappings":"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","sources":["components/Text.jsx","components/three-canvas.jsx"],"sourcesContent":["import * as THREE from 'three'\nimport React, { useMemo, useRef, useLayoutEffect } from 'react'\nimport { extend, useLoader } from '@react-three/fiber'\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader'\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'\nimport boldUrl from '../fonts/bold.blob'\n\nextend({ TextGeometry })\n\nexport default function Text({ children, vAlign = 'center', hAlign = 'center', size = 1.5, color = '0xff0000' , ...props }) {\n  const font = useLoader(FontLoader, boldUrl)\n  const config = useMemo(\n    () => ({ font, size: '20vh', height: 10, curveSegments: 32, bevelEnabled: true, bevelThickness: 6, bevelSize: 2.5, bevelOffset: 0, bevelSegments: 8 }),\n    [font]\n  )\n  const mesh = useRef()\n  useLayoutEffect(() => {\n    const size = new THREE.Vector3()\n    mesh.current.geometry.computeBoundingBox()\n    mesh.current.geometry.boundingBox.getSize(size)\n    mesh.current.position.x = hAlign === 'center' ? -size.x / 2 : hAlign === 'right' ? 0 : -size.x\n    mesh.current.position.y = vAlign === 'center' ? -size.y / 2 : vAlign === 'top' ? 0 : -size.y\n  }, [children])\n  return (\n    <group {...props} scale={[0.1 * size, 0.1 * size, 0.1]}>\n      <mesh ref={mesh}>\n        <textGeometry args={[children, config]} />\n        <meshNormalMaterial />\n      </mesh>\n    </group>\n  )\n}","import * as THREE from 'three'\nimport React, { Suspense, useEffect, useRef, useState } from 'react'\nimport { Canvas, useLoader, useFrame } from '@react-three/fiber'\nimport { Sky, Environment } from '@react-three/drei'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport Text from './Text'\n\n\nimport ThreeStars from './three-starts'\n\n\nfunction Bird({ speed, factor, url, ...props }) {\n  const { nodes, materials, animations } = useLoader(GLTFLoader, url)\n  const group = useRef()\n  const mesh = useRef()\n  const [start] = useState(() => Math.random() * 5000)\n  const [mixer] = useState(() => new THREE.AnimationMixer())\n  useEffect(() => void mixer.clipAction(animations[0], group.current).play(), [])\n  useFrame((state, delta) => {\n    mesh.current.position.y = Math.sin(start + state.clock.elapsedTime) * 5\n    mesh.current.rotation.x = Math.PI / 2 + (Math.sin(start + state.clock.elapsedTime) * Math.PI) / 10\n    mesh.current.rotation.y = (Math.sin(start + state.clock.elapsedTime) * Math.PI) / 2\n    group.current.rotation.y += Math.sin((delta * factor) / 2) * Math.cos((delta * factor) / 2) * 1.5\n    mixer.update(delta * speed)\n  })\n  return (\n    <group ref={group} dispose={null}>\n      <scene name=\"Scene\" {...props}>\n        <mesh\n          ref={mesh}\n          scale={1.5}\n          name=\"Object_0\"\n          morphTargetDictionary={nodes.Object_0.morphTargetDictionary}\n          morphTargetInfluences={nodes.Object_0.morphTargetInfluences}\n          rotation={[Math.PI / 2, 0, 0]}\n          geometry={nodes.Object_0.geometry}\n          material={materials.Material_0_COLOR_0}\n        />\n      </scene>\n    </group>\n  )\n}\n\nfunction Birds() {\n  return new Array(50).fill().map((_, i) => {\n    const x = (20 + Math.random() * 80) * (Math.round(Math.random()) ? -1 : 1)\n    const y = -10 + Math.random() * 20\n    const z = -5 + Math.random() * 10\n    const bird = ['Stork', 'Parrot', 'Flamingo'][Math.round(Math.random() * 2)]\n    let speed = bird === 'Stork' ? 0.25 : bird === 'Flamingo' ? 0.5 : 5\n    let factor = bird === 'Stork' ? 0.5 + Math.random() : bird === 'Flamingo' ? 0.25 + Math.random() : 1 + Math.random() - 0.5\n    return <Bird key={i} position={[x, y, z]} rotation={[0, x > 0 ? Math.PI : 0, 0]} speed={speed} factor={factor} url={`/${bird}.glb`} />\n  })\n}\n\n\nconst ThreeCanvas = ({ okToAnimate, onCreated }) => {\n  return (\n    <Canvas  camera={{ position: [0, 0, 35] }} onCreated={onCreated}>\n      <ambientLight intensity={2} />\n      <pointLight position={[40, 40, 40]} />\n      <Suspense fallback={null}>\n        <Birds />\n        <Sky />\n        <Environment preset=\"city\" />\n      </Suspense>\n    </Canvas>\n  )\n}\n\n\nexport default ThreeCanvas"],"names":["extend","TextGeometry","Bird","speed","factor","url","props","useLoader","GLTFLoader","nodes","materials","animations","group","useRef","mesh","useState","Math","random","start","THREE","mixer","useEffect","clipAction","current","play","useFrame","state","delta","position","y","sin","clock","elapsedTime","rotation","x","PI","cos","update","ref","dispose","name","scale","morphTargetDictionary","Object_0","morphTargetInfluences","geometry","material","Material_0_COLOR_0","Birds","Array","fill","map","_","i","round","z","bird","okToAnimate","onCreated","camera","intensity","Suspense","fallback","Sky","Environment","preset"],"sourceRoot":""}